version: 2.1

orbs:
  sam: circleci/aws-sam-serverless@3.1.0

# destroy cluster to clean up environment is pipeline process fails
commands:
  destroy-cluster:
    description: Destroy EKS Cluster.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            eksctl delete cluster --name devopsproject

  # install kubectl and eksctl
  install-kubectl-and-eksctl:
    description: install kubectl and eksctl
    steps:
      - run:
          name: Installing kubectl and eksctl
          command: |
            yum install tar gzip -y
            curl https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -o awscli-bundle.zip
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl

# linting
jobs:
  lint-app:
    docker:
      - image: python:3.8
    steps:
      - checkout
      - run:
          name: Python linting
          command: |
            pip install --upgrade pip
            pip install flake8  
            flake8 myapp.py

  # build and push docker image for deployment
  build-and-push-node1:
    machine: true
    steps:
      - checkout
      - run:
          name: Load .env File
          command: |
            echo "$DOTENV_FILE" > .env
      - run:
          name: Build and Push Docker Image for deploy
          command: |
            docker build -t iolowookere217/my-webapp:v1 .
            echo "$DOTENV_FILE" | docker login -u iolowookere217 --password-stdin
            docker push iolowookere217/my-webapp:v1

  # delete existing stack
  # delete-existing-ec2-resources:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Delete if Stack Exists
  #         command: |
  #           aws cloudformation delete-stack --stack-name devops-stack --region us-east-1
  #           aws cloudformation wait stack-delete-complete --stack-name devops-stack --region us-east-1

  # delete existing and create a new stack
  delete-existing-create-new-ec2-resources:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Configure AWS Credentials
          command: |
            aws cloudformation delete-stack --stack-name devops-stack --region us-east-1
            aws cloudformation wait stack-delete-complete --stack-name devops-stack --region us-east-1
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region us-east-1
      - run:
          name: Creating EC2 resources
          command: |
            aws cloudformation create-stack \
              --stack-name devops-stack \
              --template-body file://cf.yml \
              --region us-east-1 
            aws cloudformation wait stack-create-complete --stack-name devops-stack --region us-east-1

  # create a new eks cluster
  delete-existing-create-new-eks-cluster-app:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install-kubectl-and-eksctl
      - run:
          name: Creating K8S cluster
          command: |
            echo
            eksctl delete cluster --name devopsproject --region us-east-1 --wait
            eksctl create cluster \
            --name devopsproject \
            --region us-east-1 \
            --with-oidc \
            --ssh-access \
            --ssh-public-key new-key
            kubectl get nodes -o wide
            kubectl create namespace node-namespace
            aws eks update-kubeconfig --name devopsproject --region us-east-1
      - run:
          name: Deploying v1
          command: |
            kubectl apply -f deploy.yml
      - destroy-cluster

  # smoke test for the app
  smoke-test-v1:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install-kubectl-and-eksctl
      - run:
          name: Installing dependencies
          command: |
            echo
            yum install jq -y
      - destroy-cluster

# workflows showing step dependencies
workflows:
  the_jobs:
    jobs:
      - lint-app
      - smoke-test-v1:
          requires: [lint-app]
      - build-and-push-node1:
          requires: [lint-app]
      - delete-existing-create-new-ec2-resources:
          requires: [build-and-push-node1, smoke-test-v1]
      # - create-ec2-resources-after-deletion:
      #     requires: [delete-existing-ec2-resources]
      - delete-existing-create-new-eks-cluster-app:
          requires: [delete-existing-create-new-ec2-resources]
